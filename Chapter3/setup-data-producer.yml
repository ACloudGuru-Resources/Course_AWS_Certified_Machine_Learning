Parameters:
  KinesisDataStream:
    Description: The name of your Kinesis Data Stream.
    Type: String
Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-0080e4c5bc078760e
    us-east-2:
      AMI: ami-0cd3dfa4e37921605
    us-west-1:
      AMI: ami-0ec6517f6edbf8044
    us-west-2:
      AMI: ami-01e24be29428c15b2
Resources:
  LnDataProducerInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId:
        Fn::FindInMap:
        - RegionMap
        - !Ref AWS::Region
        - AMI
      IamInstanceProfile: !Ref LnInstanceProfiler
      UserData:
        Fn::Base64:
          !Join [ "", [
            "#!/bin/bash -xe\n",
            "sudo /opt/aws/bin/cfn-init -v ", #use cfn-init to install packages in cloudformation init
            !Sub "--stack ${AWS::StackName} ",
            "--resource LnDataProducerInstance ",
            "--configsets InstallAndConfigure ",
            !Sub "--region ${AWS::Region}",
            "\n"] ]
    Metadata:
      AWS::CloudFormation::Init:
        configSets: 
          InstallAndConfigure:
            - "install_boto3"
            - "install_requests"
            - "create_script"
        install_boto3:
          commands:
            test:
              command: sudo pip install boto3
        install_requests:
          commands:
            test:
              command: sudo pip install requests
        create_script:
          files:
            "/tmp/stream.py":
              content: !Join [ "", [ 
                  "import requests\n",
                  "import json\n",
                  "import boto3\n",
                  "import uuid\n",
                  "import time\n",
                  "import random\n",

                  "client = boto3.client('kinesis', region_name='", !Sub "${AWS::Region}", "')\n",
                  "partition_key = str(uuid.uuid4())\n",
                  "number_of_results = 500\n",
                  "r = requests.get('https://randomuser.me/api/?exc=login&results=' + str(number_of_results))\n",
                  "data = r.json()['results']\n",
                  "while True:\n",
                  "\trandom_user_index = int(random.uniform(0, (number_of_results - 1)))\n",
                  "\trandom_user = json.dumps(data[random_user_index])\n",
                  "\tresponse = client.put_record(StreamName='", !Sub "${KinesisDataStream}", "', Data=random_user, PartitionKey=partition_key)\n",
                  "\ttime.sleep(random.uniform(0, 1))\n",
                  "\n" ] ]
              mode: "000600"
              owner: "ec2-user"
              group: "ec2-user"
          commands:
            test:
              command: python /tmp/stream.py
  LnInstanceProfiler:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles:
        - !Ref LnDataProducerRole
  LnKinesisPolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyDocument:
        Statement: 
          - 
            Effect: "Allow"
            Action: 
              - "kinesis:DescribeStream"
              - "kinesis:PutRecord"
              - "kinesis:PutRecords"
            Resource: 
              - !Sub "arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/${KinesisDataStream}"
      PolicyName: "kinesis-put-records-policy-lab-ml-specialty-course"
      Roles: 
        - !Ref LnDataProducerRole
  LnDataProducerRole:  
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      RoleName: data-producer-role-kinesis-lab-ml-specialty-course